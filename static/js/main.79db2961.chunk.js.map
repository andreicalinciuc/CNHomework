{"version":3,"sources":["containers/Tema/Tema1.jsx","containers/ErrorPage/Error.jsx","containers/Cms/index.js","store/actions/actions.js","App.js","serviceWorker.js","histoy.jsx","store/reducers/loginReducer.jsx","index.js"],"names":["Tema1","props","state","matr1","matr2","Input","multiline","rowsMax","onChange","e","setState","target","value","this","Component","CMS","className","Sidebar","as","Menu","inverted","visible","vertical","width","icon","to","Item","name","path","component","connect","isLogin","dispatch","Logout","type","App","Boolean","window","location","hostname","match","createBrowserHistory","initialState","reducer","action","store","createStore","logInReducer","ReactDOM","render","StrictMode","history","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+VA0DeA,E,kDArDb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,KACPC,MAAO,MAJQ,E,qDAQT,IAAD,OACP,OACE,6BACE,6BACE,mCACA,kDAEF,6BACE,mCACA,kDAEF,6BACE,mCACA,6BACE,qCACA,kBAACC,EAAA,EAAD,CACAC,WAAW,EACXC,QAAS,GACPC,SAAU,SAACC,GACT,EAAKC,SAAS,CACZP,MAAOM,EAAEE,OAAOC,YAMxB,6BACE,qCACA,kBAACP,EAAA,EAAD,CACYC,WAAW,EACrBE,SAAU,SAACC,GACT,EAAKC,SAAS,CACZN,MAAOK,EAAEE,OAAOC,aAM1B,2BAAIC,KAAKX,MAAMC,OACf,2BAAIU,KAAKX,MAAME,Y,GAhDHU,a,GCFIA,Y,aCUlBC,E,uKAEF,OACE,yBAAKC,UAAU,QACb,kBAACC,EAAA,EAAD,CACEC,GAAIC,IACJC,UAAQ,EACRC,SAAO,EACPC,UAAQ,EACRC,MAAM,OACNC,KAAK,WAEL,kBAAC,IAAD,CAAMC,GAAG,UACP,kBAACN,EAAA,EAAKO,KAAN,CAAWC,KAAK,SAAhB,UAEF,kBAAC,IAAD,CAAMF,GAAG,UACP,kBAACN,EAAA,EAAKO,KAAN,CAAWC,KAAK,SAAhB,UAEF,kBAAC,IAAD,CAAMF,GAAG,UACP,kBAACN,EAAA,EAAKO,KAAN,CAAWC,KAAK,SAAhB,UAEF,kBAAC,IAAD,CAAMF,GAAG,UACP,kBAACN,EAAA,EAAKO,KAAN,CAAWC,KAAK,SAAhB,UAGF,kBAAC,IAAD,CAAMF,GAAG,UACP,kBAACN,EAAA,EAAKO,KAAN,CAAWC,KAAK,SAAhB,UAEF,kBAAC,IAAD,CAAMF,GAAG,UACP,kBAACN,EAAA,EAAKO,KAAN,CAAWC,KAAK,SAAhB,WAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SAASC,UAAW7B,IAChC,kBAAC,IAAD,CAAO4B,KAAK,SAASC,UAAW7B,IAChC,kBAAC,IAAD,CAAO4B,KAAK,SAASC,UAAW7B,IAChC,kBAAC,IAAD,CAAO4B,KAAK,SAASC,UAAW7B,IAChC,kBAAC,IAAD,CAAO4B,KAAK,SAASC,UAAW7B,IAChC,kBAAC,IAAD,CAAO4B,KAAK,SAASC,UAAW7B,U,GAtCxBc,aA2DHgB,eAfS,SAAC5B,GACvB,MAAO,CACL6B,QAAS7B,EAAM6B,YAIQ,SAACC,GAC1B,MAAO,CACLC,OAAQ,WACND,EAAS,CACPE,KCjEe,gBDsERJ,CAA6Cf,GE1D7CoB,MATf,WACE,OACE,yBAAKnB,UAAU,QAEX,kBAAC,EAAD,QCIYoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YChBSC,gBCDTC,EAAe,CACnBX,SAAS,GAqBIY,EAlBC,WAAmC,IAAlCzC,EAAiC,uDAAzBwC,EAAcE,EAAW,uCAChD,OAAQA,EAAOV,MACb,IJPkB,SIQhB,MAAO,CACLH,SAAS,GAGb,IJXmB,UIYjB,MAAO,CACLA,SAAS,GAIb,QACE,OAAO7B,I,QCPP2C,EAAQC,YAAYC,GAE1BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAYC,QAASA,GACnB,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,SAINO,SAASC,eAAe,SH6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.79db2961.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport users from \"../../global/usersList\";\r\nimport \"./Users.css\";\r\nimport { Input } from \"@material-ui/core\";\r\nclass Tema1 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      matr1: null,\r\n      matr2: null,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <p>Ex 1</p>\r\n          <p>cel mai mic nr..: </p>\r\n        </div>\r\n        <div>\r\n          <p>Ex 2</p>\r\n          <p>cel mai mic nr..: </p>\r\n        </div>\r\n        <div>\r\n          <p>Ex 3</p>\r\n          <div>\r\n            <p>Matr1:</p>\r\n            <Input\r\n            multiline={true}\r\n            rowsMax={15}\r\n              onChange={(e) => {\r\n                this.setState({\r\n                  matr1: e.target.value,\r\n\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n          <div>\r\n            <p>Matr2:</p>\r\n            <Input\r\n                        multiline={true}\r\n              onChange={(e) => {\r\n                this.setState({\r\n                  matr2: e.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <p>{this.state.matr1}</p>\r\n        <p>{this.state.matr2}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tema1;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorPage extends Component {\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          flexDirection: \"column\",\r\n        }}\r\n      >\r\n        <h1>404</h1>\r\n        <h4>Uh oh! Are you sure you wanted to go here?</h4>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default ErrorPage;\r\n","import React, { Component } from \"react\";\r\nimport { Header, Icon, Image, Menu, Segment, Sidebar } from \"semantic-ui-react\";\r\nimport { Route, Switch, Link } from \"react-router-dom\";\r\nimport PowerSettingsNewIcon from \"@material-ui/icons/PowerSettingsNew\";\r\nimport PeopleIcon from \"@material-ui/icons/People\";\r\nimport Tema1 from \"../Tema/Tema1\";\r\nimport ErrorPage from \"../ErrorPage/Error\";\r\nimport \"../../global/global.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport * as actionTypes from \"../../store/actions/actions\";\r\n\r\nclass CMS extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"page\">\r\n        <Sidebar\r\n          as={Menu}\r\n          inverted\r\n          visible\r\n          vertical\r\n          width=\"thin\"\r\n          icon=\"labeled\"\r\n        >\r\n          <Link to=\"/tema1\">\r\n            <Menu.Item name=\"users\">Tema1</Menu.Item>\r\n          </Link>\r\n          <Link to=\"/tema2\">\r\n            <Menu.Item name=\"users\">Tema2</Menu.Item>\r\n          </Link>\r\n          <Link to=\"/tema3\">\r\n            <Menu.Item name=\"users\">Tema3</Menu.Item>\r\n          </Link>\r\n          <Link to=\"/tema4\">\r\n            <Menu.Item name=\"users\">Tema4</Menu.Item>\r\n          </Link>\r\n\r\n          <Link to=\"/tema6\">\r\n            <Menu.Item name=\"users\">Tema6</Menu.Item>\r\n          </Link>\r\n          <Link to=\"/tema7\">\r\n            <Menu.Item name=\"users\">Tema7</Menu.Item>\r\n          </Link>\r\n        </Sidebar>\r\n        <Switch>\r\n          <Route path=\"/tema1\" component={Tema1} />\r\n          <Route path=\"/tema2\" component={Tema1} />\r\n          <Route path=\"/tema3\" component={Tema1} />\r\n          <Route path=\"/tema4\" component={Tema1} />\r\n          <Route path=\"/tema6\" component={Tema1} />\r\n          <Route path=\"/tema7\" component={Tema1} />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isLogin: state.isLogin,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    Logout: () => {\r\n      dispatch({\r\n        type: actionTypes.LOG_OUT,\r\n      });\r\n    },\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CMS);\r\n","export const LOG_IN = \"LOG_IN\";\r\nexport const LOG_OUT = \"LOG_OUT\";\r\n\r\n","import React from \"react\";\nimport \"./App.css\";\nimport CMS from \"./containers/Cms/index\";\nimport \"./global/global.css\";\nfunction App() {\n  return (\n    <div className=\"page\">\n      \n        <CMS></CMS>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createBrowserHistory } from \"history\";\r\n\r\nexport default createBrowserHistory();\r\n","import * as actionTypes from \"../actions/actions\";\r\nconst initialState = {\r\n  isLogin: false,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.LOG_IN: {\r\n      return {\r\n        isLogin: true,\r\n      };\r\n    }\r\n    case actionTypes.LOG_OUT: {\r\n      return {\r\n        isLogin: false,\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport history from \"./histoy\";\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport logInReducer from \"../src/store/reducers/loginReducer\";\n\nimport { Provider } from \"react-redux\";\n\nimport { createStore } from \"redux\";\nconst store = createStore(logInReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter history={history}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}